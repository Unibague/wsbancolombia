CREATE OR REPLACE PACKAGE SIA_WS_QUERY_BILLS AS
  PROCEDURE INSERT_RECIBO_TEMP(RECIBO IN SIA_BILL_DATA_TYPE);
  FUNCTION CHECK_STATUS RETURN VARCHAR2;
  FUNCTION SEARCH_BILL(QTYPE VARCHAR2, QVALUE VARCHAR2) RETURN SYS_REFCURSOR;
  PROCEDURE PAY_CURRENT_BILL (P_ID_TRANSACCION IN VARCHAR2, P_ID_BANCO IN VARCHAR2, P_ID_SUCURSAL IN VARCHAR2,
          P_FECHA_PAGO IN DATE, P_VALOR_PAGO IN NUMBER, P_FORMA_PAGO IN CHAR,
          P_NIT_PAGADOR IN VARCHAR2, P_ID_FACTURA IN VARCHAR2, P_ID_GRUPO_PAGO IN VARCHAR2, P_ESTADO OUT NUMBER,
          P_FECHA_LIMITE_PAGO OUT DATE, P_FECHA_REGISTRO OUT DATE, P_SERIAL OUT NUMBER, P_REFERENCIA OUT VARCHAR2);
END SIA_WS_QUERY_BILLS;
/

CREATE OR REPLACE PACKAGE BODY SIA_WS_QUERY_BILLS AS
    PROCEDURE INSERT_RECIBO_TEMP(RECIBO IN SIA_BILL_DATA_TYPE) IS
    BEGIN
        INSERT INTO SIA_WS_RECIBO_TEMP
        VALUES(RECIBO.CLIENTE, RECIBO.VALOR, RECIBO.FECHA_LIMITE_PAGO, RECIBO.REFERENCIA,
        RECIBO.REFERENCIA_ACADEMICO, RECIBO.TIPO_RECIBO, SYSDATE);
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX THEN
                UPDATE SIA_WS_RECIBO_TEMP
                SET CLIENTE = RECIBO.CLIENTE, VALOR = RECIBO.VALOR, FECHA_LIMITE_PAGO = RECIBO.FECHA_LIMITE_PAGO,
                REFERENCIA_ACADEMICO = RECIBO.REFERENCIA_ACADEMICO, TIPO_RECIBO = RECIBO.TIPO_RECIBO,
                FECHA_REGISTRO = SYSDATE WHERE REFERENCIA = RECIBO.REFERENCIA;
    END INSERT_RECIBO_TEMP;

    FUNCTION CHECK_STATUS RETURN VARCHAR2 IS
        TABLE_CHECK INTEGER := 0;
        PROCEDURE_CHECK INTEGER := 0;
        TYPE_CHECK INTEGER := 0;
    BEGIN
        SELECT COUNT(TNAME) INTO TABLE_CHECK FROM SYS.TAB WHERE (TABTYPE = 'TABLE' AND
        TNAME IN('SIA_WS_RECIBO_TEMP', 'SIA_WS_PAGOS_RIN', 'SALDO_CARTERA')) OR
        (TABTYPE = 'VIEW' AND TNAME='CCV_RECIBO_CONSIGNACION_VIGENT');

        SELECT COUNT(PROCEDURE_NAME) INTO PROCEDURE_CHECK FROM SYS.USER_PROCEDURES
        WHERE (OBJECT_NAME = 'SIA_WS_QUERY_BILLS' AND PROCEDURE_NAME IN ('INSERT_RECIBO_TEMP',
        'PAY_CURRENT_BILL', 'SEARCH_BILL')) OR
        (OBJECT_NAME = 'SIA_BUSCAR_FACTURAS' AND PROCEDURE_NAME IN ('ORDEN_MATRICULA_POR_RC',
        'CUOTA_CREDITO_POR_RC', 'TODAS_POR_RC','ORDEN_MATRICULA_POR_NIT','CUOTA_CREDITO_POR_NIT',
        'TODAS_POR_NIT'));

        SELECT CASE WHEN EXISTS(SELECT TYPE_NAME FROM SYS.ALL_TYPES WHERE TYPE_NAME = 'SIA_BILL_DATA_TYPE')
        THEN 1 ELSE 0 END INTO TYPE_CHECK FROM DUAL;

        IF TABLE_CHECK <> 4 AND PROCEDURE_CHECK <> 9 AND TYPE_CHECK = 0 THEN
            RETURN '500';
        ELSE
            RETURN '200';
        END IF;
    END CHECK_STATUS;

    FUNCTION SEARCH_BILL(QTYPE VARCHAR2, QVALUE VARCHAR2) RETURN SYS_REFCURSOR IS
        MBILL SIA_BILL_DATA_TYPE;
        BILL_LIST SIA_BILL_ARRAY := SIA_BILL_ARRAY();
        CURRENT_POS NUMBER := 1;
        NMBR NUMBER := 1;
        RCID NUMBER(8,0);
        LAST_BILL NUMBER(8,0) := -1;
        RESULT_CURSOR SYS_REFCURSOR;
    BEGIN
        IF QTYPE = 'ConsultarFacturaPorNumero' THEN
            IF REGEXP_LIKE(QVALUE, '^\d+,') THEN
                LOOP
                    NMBR := REGEXP_INSTR(QVALUE, ',', CURRENT_POS);
                    EXIT WHEN NMBR = 0;
                    RCID := TO_NUMBER(SUBSTR(QVALUE, CURRENT_POS, NMBR - CURRENT_POS));
                    MBILL := SIA_BUSCAR_FACTURAS.TODAS_POR_RC(RCID);
                    IF MBILL IS NOT NULL THEN
                        BILL_LIST.EXTEND;
                        BILL_LIST(BILL_LIST.LAST) := MBILL;
                        INSERT_RECIBO_TEMP(MBILL);
                    END IF;
                    CURRENT_POS := NMBR + 1;
                END LOOP;

                RCID := TO_NUMBER(SUBSTR(QVALUE, CURRENT_POS));
                MBILL := SIA_BUSCAR_FACTURAS.TODAS_POR_RC(RCID);
                IF MBILL IS NOT NULL THEN
                    BILL_LIST.EXTEND;
                    BILL_LIST(BILL_LIST.LAST) := MBILL;
                    INSERT_RECIBO_TEMP(MBILL);
                END IF;
            ELSE
                SELECT CASE WHEN EXISTS(
                    SELECT 'X' FROM TET_PAGOS_ONLINE WHERE RECIBO_CONSIGNACION = TO_NUMBER(QVALUE)
                ) THEN 0 ELSE 1 END INTO NMBR FROM DUAL;

                IF NMBR = 0 THEN
                    RAISE DUP_VAL_ON_INDEX;
                ELSE
                    RCID := TO_NUMBER(QVALUE);
                    MBILL := SIA_BUSCAR_FACTURAS.TODAS_POR_RC(RCID);
                    IF MBILL IS NOT NULL THEN
                        BILL_LIST.EXTEND;
                        BILL_LIST(BILL_LIST.LAST) := MBILL;
                        INSERT_RECIBO_TEMP(MBILL);
                    END IF;
                END IF;
            END IF;
        ELSIF QTYPE = 'ConsultaFacturasPorNit' THEN
            BILL_LIST := SIA_BUSCAR_FACTURAS.TODAS_POR_NIT(QVALUE);
            FOR IND IN 1..BILL_LIST.COUNT LOOP
                MBILL := BILL_LIST(IND);
                IF LAST_BILL = MBILL.REFERENCIA THEN
                    BILL_LIST.DELETE(IND);
                ELSE
                    LAST_BILL := MBILL.REFERENCIA;
                    INSERT_RECIBO_TEMP(MBILL);
                END IF;
            END LOOP;
        END IF;

        OPEN RESULT_CURSOR FOR SELECT * FROM TABLE(CAST(BILL_LIST AS SIA_BILL_ARRAY));
        RETURN RESULT_CURSOR;
    END SEARCH_BILL;

    PROCEDURE PAY_CURRENT_BILL (P_ID_TRANSACCION IN VARCHAR2, P_ID_BANCO IN VARCHAR2, P_ID_SUCURSAL IN VARCHAR2,
        P_FECHA_PAGO IN DATE, P_VALOR_PAGO IN NUMBER, P_FORMA_PAGO IN CHAR,
        P_NIT_PAGADOR IN VARCHAR2, P_ID_FACTURA IN VARCHAR2, P_ID_GRUPO_PAGO IN VARCHAR2, P_ESTADO OUT NUMBER,
        P_FECHA_LIMITE_PAGO OUT DATE, P_FECHA_REGISTRO OUT DATE, P_SERIAL OUT NUMBER, P_REFERENCIA OUT VARCHAR2) AS

        BILL_INFO SIA_BILL_DATA_TYPE;
        PAYED_BILL NUMBER(1);
        USED_RQID NUMBER(1);
    BEGIN
        SELECT CASE WHEN EXISTS (
            SELECT SECUENCIA FROM TET_PAGOS_ONLINE WHERE RECIBO_CONSIGNACION = P_ID_FACTURA)
        THEN 1 ELSE 0 END INTO PAYED_BILL FROM DUAL;

        SELECT CASE WHEN EXISTS (
            SELECT SECUENCIA FROM SIA_WS_PAGOS_RIN WHERE ID_TRANSACCION = P_ID_TRANSACCION AND CODIGO_ESTADO = 0)
        THEN 1 ELSE 0 END INTO USED_RQID FROM DUAL;

        IF PAYED_BILL = 0 AND USED_RQID = 0 THEN
            P_ESTADO := 5; -- CODIGO DEL BANCO PARA PAGO NO REALIZADO
            BEGIN
                SELECT SIA_BILL_DATA_TYPE(CLIENTE, VALOR, FECHA_LIMITE_PAGO, REFERENCIA, REFERENCIA_ACADEMICO, TIPO_RECIBO)
                INTO BILL_INFO
                FROM SIA_WS_RECIBO_TEMP
                WHERE REFERENCIA = TO_NUMBER(P_ID_FACTURA) AND ROUND((SYSDATE - FECHA_REGISTRO) * (60 * 24), 2) < 10;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    BILL_INFO := SIA_BUSCAR_FACTURAS.TODAS_POR_RC(TO_NUMBER(P_ID_FACTURA));
                    IF BILL_INFO IS NULL THEN
                       BILL_INFO := SIA_BILL_DATA_TYPE(0, 0, SYSDATE - 1, 0, 'TEST', 'TEST');
                       P_ESTADO := 1; -- CODIGO DEL BANCO PARA FACTURA NO EXISTE
                    END IF;
            END;

            IF BILL_INFO.VALOR > 0 AND BILL_INFO.VALOR = P_VALOR_PAGO THEN
                P_ESTADO := 0; -- CODIGO DEL BANCO PARA PAGO REALIZADO
                P_REFERENCIA := BILL_INFO.REFERENCIA_ACADEMICO;
            END IF;

            P_FECHA_LIMITE_PAGO := BILL_INFO.FECHA_LIMITE_PAGO;
        ELSE

            IF USED_RQID = 1 THEN
                P_ESTADO := 6;
            ELSIF PAYED_BILL = 1 THEN
                P_ESTADO := 2;
            END IF;

            P_FECHA_LIMITE_PAGO := SYSDATE - 1;
            P_REFERENCIA := 'FAIL';
        END IF;

        INSERT INTO SIA_WS_PAGOS_RIN(ID_TRANSACCION, ID_BANCO, ID_SUCURSAL, FECHA_PAGO,
            VALOR_PAGO, FORMA_PAGO, NIT_PAGADOR, ID_FACTURA, ID_GRUPO_PAGO, CODIGO_ESTADO)
        VALUES (P_ID_TRANSACCION, P_ID_BANCO, P_ID_SUCURSAL, P_FECHA_PAGO, P_VALOR_PAGO,
            P_FORMA_PAGO, P_NIT_PAGADOR, P_ID_FACTURA, P_ID_GRUPO_PAGO, P_ESTADO)
        RETURNING FECHA_REGISTRO, SECUENCIA INTO P_FECHA_REGISTRO, P_SERIAL;
    END PAY_CURRENT_BILL;
END SIA_WS_QUERY_BILLS;
/